// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String    @unique
  password_hash String
  name         String
  avatar_url   String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  is_active    Boolean   @default(true)    //deactivated or something like that

  // Relations
  workspaces   ProjectWorkspaceMember[]
  tasks        TaskAssignment[]
  comments     Comment[]
  //attachments  Attachment[]

  @@map("users")
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  members     ProjectWorkspaceMember[]
  projects    Project[]
  WorkspaceInvitation WorkspaceInvitation[]

  @@map("workspaces")
  
}

model WorkspaceInvitation {
  id            String    @id @default(cuid())
  workspaceId   String
  invitedEmail  String
  status        String    @default("PENDING") // PENDING, ACCEPTED, REJECTED
  created_at    DateTime  @default(now())
  expires_at    DateTime? // Optional: Expiration for the link

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("workspace_invitations")
}


model ProjectWorkspaceMember {
  id            String       @id @default(cuid())
  userId        String
  workspaceId   String?      
  projectId     String?    
  role          String
  joined_at     DateTime  @default(now())
  left_at       DateTime?

  // Relations
  user          User         @relation(fields: [userId], references: [id])
  workspace     Workspace?   @relation(fields: [workspaceId], references: [id])
  project       Project?     @relation(fields: [projectId], references: [id])

  @@unique([userId, workspaceId, projectId])
  @@map("project_workspace_members")
}


model Project {
  id          String       @id @default(cuid())
  workspaceId String
  name        String
  description String?
  status      String
  start_date  DateTime
  end_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  members     ProjectWorkspaceMember[]
  tasks       Task[]
  //docs        Doc[]
  //notepads    Notepad[]
  //whiteboards Whiteboard[]

  @@map("projects")
}

model Task {
  id          String       @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  isCompleted Boolean      @default(false)
  isPinned    Boolean      @default(false)
  priority    Int
  due_date    DateTime?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  project     Project      @relation(fields: [projectId], references: [id])
  assignments TaskAssignment[]
  comments    Comment[]
  @@index([status, isPinned])  

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}


model TaskAssignment {
  id           String       @id @default(cuid())
  taskId       String
  userId       String
  assigned_at  DateTime @default(now())

  // Relations
  task         Task     @relation(fields: [taskId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@map("task_assignments")
}

model Comment {
  id         String       @id @default(cuid())
  taskId     String
  userId     String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  task       Task     @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

// model Attachment {
//   id          Int      @id @default(autoincrement())
//   taskId      Int
//   userId      Int
//   file_name   String
//   file_path   String
//   file_type   String
//   file_size   Int
//   uploaded_at DateTime @default(now())

//   // Relations
//   task        Task     @relation(fields: [taskId], references: [id])
//   user        User     @relation(fields: [userId], references: [id])

//   @@map("attachments")
// }

// model Doc {
//   id          Int      @id @default(autoincrement())
//   projectId   Int
//   title       String
//   content     String
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt

//   // Relations
//   project     Project  @relation(fields: [projectId], references: [id])

//   @@map("docs")
// }

// model Notepad {
//   id          Int      @id @default(autoincrement())
//   projectId   Int
//   title       String
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt

//   // Relations
//   project     Project  @relation(fields: [projectId], references: [id])
//   notes       Notes[]

//   @@map("notepads")
// }

// model Notes {
//   id          Int      @id @default(autoincrement())
//   notepadId   Int
//   title       String
//   content     String
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt

//   // Relations
//   notepad     Notepad  @relation(fields: [notepadId], references: [id])

//   @@map("notes")
// }

// model Whiteboard {
//   id          Int      @id @default(autoincrement())
//   projectId   Int
//   title       String
//   content     String
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt

//   // Relations
//   project     Project  @relation(fields: [projectId], references: [id])

//   @@map("whiteboards")
// }